package org.denigma.bio

import java.io.File

import me.shadaj.genalgo.sequences.{AminoAcid, Protein, DNA}
import org.denigma.bio.lessons.peptides._

import scala.io.Source


object Main extends scala.App{

//  import me.shadaj.genalgo.sequences.DNA
//  import me.shadaj.genalgo.uniprot.Uniprot
//  import org.biojava.bio.proteomics.StructureTools
//  import org.biojava3.core.sequence.DNASequence
//  import org.biojava3.core.sequence.transcription.TranscriptionEngine
//  import org.denigma.bio.kmers.{Clumps, Skew, Mismatches}
//  import org.denigma.bio.lessons.orig.Leven
//  import scala.concurrent.duration._
//  import scala.concurrent.Await
//  import scala.concurrent.duration.Duration._
//
//  val r = RNA("AUGAAAACCAUUUGCUUGCUAGGUCGGUGCACGGUGUUGCCCGACCUUCUUUGCAUUCUCCCCGCUCACAUCACCUUAGAUUUUGCGUUGUGCGGCGCGAGGUCCACGCGGGCCGCAAUAGAACUGAGCUUCGAUAACACAGGUAUUAGGUUAGAACCACCACAAGGAGGUCGUCAUGUCUUCAGGUCUACCAUCCCCUUCUUGCUCGCGCGCACCCGCCUGACCCCACUUCUACAUCGAACGCGUGUGAGAGCCUCUGUCGUUUCUUGCGUUUCAUGGCAGGGUGUACUAAGUGCUGUCGAGUUUACUCCUUCCAACAUGUUUUUCUCACCGCUACGUGAAUUUUACUCGUACCUCAUUUCCACGACUUCCCCGGAUAAGGCGCUUAUCCCAGGUAUUCCGUGCAUGACAAUGAUUUCAACUGAGGUGCGAAGAUAUACUGUUAAACCUUUCUCUGACCGCAAGCAAUUAUUGUGGGCUGGGUGCCUGACCACCCACUGUCAAGAUACUAGCUACAUUAUACAGAAGGACAUCGGUAUGACCAGGCGAGGCCGGAUGUUGCCGUUGUGGGCGGGCCUCACGGGGGAAUGGUACCUGCUUGCGCUCCAAACCAAUCUCUGCGGGUCAUUUACUAGCCCUCGCCUGACCAGUACAGAUCGGCAGCCGCGCAGGUUUGUGUUACAAGAAUCACCUCCAUCGCUCCGGACCCCGCUGCGCUUUGCCGCGUCGGUCUGCGUUUUCGGCACUCUGCCAACGGAUCGCCCGCGACACAUUGGCGGGAGGGUAGCAUCGUCUGGCAGGGUGCAUAUGCUUUUAAAUCGUCGAAUUAAAGCACCCCUUUACACCGCGUAUUCCUACUUAGGUCCAGCGCCUACUGUACGGGCGGUCGGUAGUUGUCGGUUUAGACUCGGCAAAAUUAGGCUCAUUGCGAGACUUAAUUCUUGCCACUCACGCCCGAACCAGACAGGCCGUUGCCUUGUUGCAGAACCCCCCGAGGAAUCCUUGGGUGGUUCUGCUACGCGGACUGCACAGGGACGCCGUGUCGAAAGGACGGUUGACUGUCCUAGCAACUCCUUUCCGUAUAUGAUGCUAGAGCCUGUGGUCCUAGCUUCUAAUCCCUUCGACGUUGGCAUCGGGCAUACAGGGGAGCCUUUCCCCUCCAGAAGCCGGUGGAGCGUACAGUCAGGCUCGAUCAGGUGGAAUCGCAAACCACAGAGGGGUUAUAGGUCACCUUGUAGAGAAGCGGACUUUACUGCGCGUCAUCUUAACGCGAUGUUGGGGGCCAGGUGCUGGUUCGCUGCGCAUAGAUGCUAUCUGGCUUUUGUAUCCGCUUCUUUUCCGGCCACUUCACUUAUUGCUAUCGCAGCUCGCCCACGAUUGGCAACAAUAGAGACUCGUCAUACGCAAUUCGACCCUAUUACGAUGAACCCCGCGUAUCCUUUUAUGCGUCCCGCCGGUCGCGACAUCGAAUGCGGACCAGAAUUCACAGGGCUGAAUUCCGGAUCUGUACUUGUUAUGCUUACCGCGCCACAACUAGUAAGAGGCGGAAGUAAUAGUGUUGACGCCACGGUCAGUCCGAUUAGCUCACUGCUUCGCAUCCCAACUUUAUACGUGUGCCCGAAACACUCCUUACUCCAAAACCCGUAUGCCGUGGUAAUACACACGUCGGCCACUCCACUAGUCGCUACAGUGUCGACUUAUCUAUGCGUUGUGCCCUACAGUGGAAAUAGCCUUCAAUACCAGAAUAACGAUACGAUGCUGCUAGCGUACUGCGACUAUUGCGUCGUCGAACUCGACCCGCGUACUCGCAAGGCUCAAAUAUUCAUAGCGAUAUACUUCUGCGCCUUCCAGUGUGGGACGGCAGCGCCCCUCAAUAGGUGCCUAAAGGUAAACUGCUGUCCCUUGCAUGGAAUUCCCCUCGGAUCAAGUACCGCUAAUAGGUCGAGGCAGCGACGGUUGGUAUUUGAGCUUAAAUUUCACCGGCAUGACCUUCUAAUCUUAAUGCGAGCAGACUCCAAUGCAAGGGAUUCGCCCGCAGUCUUGAGGUGCCAUCUCGUCCCUGUCGACAUCUCCCUCUUUCGUUACUCUGGCCGGUACUUGGUUCUCGGAAUAGUACUCAAUAGUUGUAAGAAACGUUCCGAGCUUGGUCCUUAUACAAUUAGGCUCCUGGGGUCAGUCGCCAUCCCCUACUGCGUUGCCAGUCAUGCACACGCACCUCUGUCGUACGUCCGUCUUAUGACUACAGGUGAUGACGGUCCGACCUUUCUAGGCGCCGCAAUCGCUCUUGUGUCCGAUGAUCACGUACGCUCAUGGUCGUCUAGUGGUCUAUAUACUCAAUGCGCCCCUGCCUUUGGCAACAUAUUUUGUGCGUGUCCGGCUGUGUACGGCAUCCGGACUUCCUGCCUGAAUUUCGUCCACUCGAGUCUGGACUCUCAAAUUCGUGGGGUAGCAAUGACAGUUGUCCCAGUGUCAAUACCAAUGUCAUCCCGCAAGCAGUGGCAUGCUGGCAUUUCGGUUCCCCUCCUAAGCUGUCUCACUCGUGACAGAACCAGUCGCCUCUCUUGGGGAUUCGACUGGGGAGGUCGUAAACAGGCUUCUCGCGGAGCUCGGAUCCAUAUUGUUUUUUUAAUUUCCUUUCCGUCUCAAGUGAACCGGACACGCAAGGGCAGCCCACACAAUCUGACACGCCGCGUUGAUACCCUCAUCACACUUAACGUUACUUGUUGGUGCUAUGGCGGUAUGGUAAAUUCAAGCCUUCUUCCCGGAAUUCUAGAGAUUGCUAGAAGUCGGAAUUCUCCUGAGGAAGUGUUUAAUUGCUUUCUAAUAUUCUGCAAGGAUGAGUAUCUAGACGAGUGUGCGAAUUGGCAUCUUCUCAGGGUUCACCUACGUUUGGGGGUACCGGGAUCAGAUUCUCAACACUGGCGGUGUAACCAUCAUGAGAUGAGUAGGACGAUCUCGUCACGGCAACUAUUGACCACCCACCCAACGCCCUCACUGCUACAAAAUUCUUGGAAGAACACACGGUCGUGGGUGAAUUCCUAUCGAUUCGUGUUUCUUCGGGGAAAAGAGGUCCGUUUGCGUUAUAGUCUAUUCACGCAACCUCUUCAUUUAAUUUUGUGCCCUUUCACGCCCGUUGCUAAGACUGAAACGUCAUAUGAGCGGACACCAAGACCAGUGUCUGCGGUCCGAGCCAAGUGGAGAAACGCCAUGAUGUUGGGACAGUCCCAUGCAUCGCUGCUAGUAACAAUUGGAGUUUCAACCUUAGGAGUACUUGCUCACAACUUCCUGAACGACGUCAAGACUUAUUUCACGCUUUUCGCCUUUCAAUGUCCUGCAGAUAUAGUCCUCGGCGUGGUGGACCACCGCCCGAUCAGUGGAUUGAAUGUCAACCCGUCGCUAUGGGUAGUCCUGGUAAGCGACGCCUUGUUGUUGCAGAAUGCGUUAUUAGCGGGAACUCUUGGCAAUGUACCGGACCCACCUUUGUGGUCAACAUCUCAAUGCCCGAAACGUAGGCAAGGAAAUUAUGGAGUAGUUACAUGCGCAGAACCGCGUCAGUGCAUGACGUCCCUCCCCUGUUUACAGAAGUUGCCUAAGGGUAGCUUCUACCUUCAAACUCAAGAAGGUCAUUUGCCCGGUCGCUUUGAACGAGUUAUGAAUAUAUUUAGGAGGGGGGAUUGUUCCGUAAAAGAAUCGGAACAAGACGUUCUCAGCGAAACAUUAAUAAGUCUGAUUUCUCACAUCGUACUAAGUCUUAAACGUUCAAGCGUCAGGCGUGAUACACACUUCUGGAACGGACCCCAAUGUGAAUUAUUGACAGCACUGAAGGUCAUAAAAUGGGACCGCAUUGUCAUAGACCACGUAGAGCUUUAUUUCACCGGAGGUAAUGCCGACUGGACUUGGCAACGAGAGGUGACCCCCUGUCCGGACCUAGCGGAUACCAACGGGUUUCCUCCUUGCGUGAGGAUUUGCAGGCUACACCCACAUUUACGCUUUAAUUCGACCCUGAGCAUCACUGGAAAUGGACGUAGAGGUCGAAUACUCGGAUUAGGCACUAGGACGGUCUUCUGCCGGAACUCCAUAGGCCGAUGCUGGGCCCUUCGCGUCGUUCAUGGCAGAUGUGGCAAUCGGUGUUUUUCCACCCGUCCCGGCGGGUCCCCUAUUAAUUUGCGCUUGAUCGUUGAUUUACAUACGGAGCUCCUACGAACCGCGUUGAGUAUCGCGAUGCUCGUGCGCUGCGAAACGAAUUCACCUACCGCAUACUGGGCCGCGCGCCAAAAGGUAACUUCGGGAACGGCAGCGAGUAUAUAUUUAGAAGGAAUUAAUGGGAGAGUAUUCGAUUAUCGCUCGCCCGAAAAUAGCUCGGAGGCGCUUACUUGGGAUUUUACACGAACGUCUACCACGAGGGAGCGAUCGGCUUUGAUCGGGGCAUGUGCGUUUAGGGCAUUGAAUCCUCUGGAUGCAAUUGUUGCUCUCGUUGUGGUUUCUUUAAUACGCGCACCAGACGGUCUGGACCGCAGGGGCUCAGCAGUUAACCCCUGGGGAAACCCUUGCAUAUAUGUUUUGCCGGACAUUCUCAGCCUCCUAGACAGCGAUAUUACCAGUCUCAGGAGGCUUAAAACCUACCAUAAGUCAACUAUGCGCAACUACGGCAGUGCAAGUCUGGGACCGCUAGCUGUGUGCACACUCUUAAGAACACCGCUUAUUAACAUUUUGUUGAAAGCUUAUAUUAGCAUGAGUGUUAAAGUAUAUAGCAUGUGUACCGGAUCCCGCUUUUUGGAUUGGAAUGUCCCUCAAGCGAACCAGAUACGUCAUGUAAUCGAGGAGAUACUUUUGCCCAAUUCGCCUAGUCCGUUCGAGAGCGAGUUGGGGGCGCAGGUCCAGUCAUUAAGGAUAGACUAUACCAAGAGCCGCACGGUCUCAGCCCGCGACACCCCGAUUAAACUCUCUAACUUCAAAAAAAAUACUCUGCAGGGGAGACCGAACGGGAUAGGUCACGGGGUGCGAGUUGACAGUCCGAUGUCGUCCUCACGCCCGAUGUGCGCAAUUCUUAGAAUUAGAGCAACCUCUCGCCUGAUCCCGCGCAUCCUUAUGUUACCACCGCACAGUCUAACCACUCACACCUUCGACCAAGAGAUAGACGACGACCUGCGUAUUCAAUCAAUACUCACUGACAAAUUAUUUACACCUGCAGCUCAAUCACCAGUGUUGGUACCCUUAAAUGACAUUUUUAUACAGCGCGUAAUUGUCCUGACGCCAGAGACUGAUUCUCAGGUAAAACAACGGUCCCCCGCCCACCAUAGCGCCUGCCGGUUCCUUUGUGAGGCACCGGUGCUACCCCGUCCUGUUUACGAUGUACAUUCCAGAGAUAUGUCCACCGAACGGCGCACAAUAGAAAAGUACAUGGUUGGUGGUUUUAAAGCCUUGGUCUACUGCUCGAUGACCGGGUUGCCAACUCAUAACUUCACUGUCGGGUUCGACUCUGUACCCCGACUUACCGACACCCGUACAGGCACACCCAGCUGUGAGGUCUCCAAGAAAAAACAGAGCCUUCCUUAUAUGGCUCUGCAUCAGAGUGAUGGCCUUACCGCCGCUAUCGGCCCUUCUCAACCAGGUGCAAACCGCGGAUGGUUUGGAGGUGCUUACUCCCAAGAGUCCGCUGGUAAUUCCCGUUGUUUUCUUAAUCUACCAUGCCAUUGCUUUGGACGUAGAGUCGUAUACCACCGGCGCCGGACUCGUUAUACGGACGUCCGUACUAGGACGACGUAUUUUAAUAGACUAAAUUCUGCCAUGGAGGCAAUGGAAAAAUCUCAUCAUCCCUACAGACUGAAGGAGAUUGGGCUCUCAAGAGUUUAUGACUUAAGGUUAAUAUUGAUGUCUUGGACGUAUCCCCGGAACCAGCCUCUCAGCCAGGCUGGAGAGCAGGACUGCGGAUUAAAGGAUCUAUUCCUGGGGCAGACAAUGUUCUAUAUGAGAAGGCCGGUUAGGUUAUUGAUCACUUGGUCUUUUAGUCCGCGCAUAGGCGUUGUUGCUUGCUCGUCCCGCGCCGCCACCGGCCACGAUGCUGCGGUUUUCCUUACGGUAAGAUCAUGUCGUGCCCACGUGCAAUCACAUGUGGGGCCACGGUGCCAGCCGCAUAAUGGACUCCCUGGGUACAAUAUUUUUUCGCGCAAAAGACUAGAUGUUGCAGAAUGCAGCGGCCAGAGAAUGAGAGCAUUACAGCCUCACCCAUUGCCGAAGACGUUAAUGCGCCCCUACCGUGCGAAUAUGGCCCUCCGUGCGAUAAGCUUAUUGUUUCCAGCCAUCUUAAAUGUAUUGGACCCUCUUUAUUGGCCAAUAACAGAAAAUGCCCCGAUUGCGAGUCUCUGCCGCCUGGGCGCGCAGUUAAGUCCGAAUGCGACGCACCCGAGAUUAAGCUACCUAGGGGUAUUGGUAUGUACUAACGUCAUGCGGGACCUUCUCGGUGCGACCAAUAGAUUCCCGAUAGCCUUGGGCAGCACUGUGAAACGACGGUACAGGAUCCCUGGAGGAAAAACAAAACAAUGUUCCAGGCUAUAUACAGGUUCUGUAGGUAACUAUGAUCGAUUAUGGCGGCUUAAACCGAGGGAAAUACCGGAAAACUGGUUCCGUGGCCCUGGACCCCGCAUGGGUCAGCCGACAGCAAAUCGCACCAUUCACGUGCCCUCAGUAGCAUCUCCUACCCAUUGCCAGUAUCAAAAAAUUGCCAGUUCCUGCUGCGACGUCGACCGCACUACAGUCCUGACUGUUAUUCCCAUCGACGGUAGUAAGUCGACGCCUUCGAGACGUCUAGGGGUAACGAAAUCUCAAGGUUAUCCAGUACGGUGCCACACUGUGGUGAAUACUGAAAGGAAGAUUUAUUUUGUGACCCCUUAUAUAGACACUCUCGCGCGAGCAUCAGCGCGCUGCGUAAGGUGCAAUAAAAUGCGGCAGUGCAUAAACCAGGCACACGCGUCUAAGCAAACUUUGGACACGUCGUCCGAGACAUCCCGCUCCGCGCACAUCAUCUCUUACAGCCCCGUCGACCCAAAGCAGCUGGAUAAAUCUAAUUGGUUGGGACGGCCAACGGUAUGGCAGAUUCCCUUAACAUGUGGGUGGAGGGAGAACUGGCCAACACCCGAAACGUGGCUCAGAGAUUCUUUUCAUCCCGACAGACUUCCAGAUCCGACCCCGUUCAUCGGGAAAUGUACUUCUCGAAAACGGCGAGAUAGAGUCUGGGUGCGAACAACCGAGGCGCCAACCGACCAGGAGGUGGCUCCGUGCAAAAUGACGGUGAACCCAUCAAAGGCAGUGUGCUACGGUGAGUGGGGCGAUUUGGGCAGCCACGUGGCAUACCUGGCCCUUCUAGCUAUCCCGACGCUGUUUCGGUCGCCGUAUGGGAGGCUGUGCGCGUUUGCACCAAGGGGGGCGGCUGCCUUUAUCCGAGUGCUUUAUCGCGCGGCAGACAAUCUGCUAGCACGGCCAAGACUGUAUAAGAUUCCCACCAAGCGCAACACGACCACAGGGUGGGGGAUGUUACGAGCAUACGGCCCUAGGGGAACCUGUCGUCGGUACGGGAAUCACCCUAAUACAAUCGCGUACAACCAGUCAUAUGGCCGCGUAUUCUUGCUCGCGAUGGGAUUAGCGAGGAGACGGCGAGAUCGACCAACCGUAAGUCGGACAAUCACUGCCCACGCGACUGUCCGGGUUAUUACUCCAGUCCAUAUAAUGCAGAUCAGUUAUGAAUCAUCGAGUGGCACUUGCUGUUCCAAAGCGGCCGUGGCGUGCUGCGUAGUGUCAAGCACCGGAGCCCCUUAUGCCAUGCGCACGAAGCACACACAUAAUUUUGAGAGUUCGCAUUUCGGCGGUAUUGCACCUCCCCGUGCAAUUUUGAGCGCUACACUGCGCCUUCCGCGACCAGUUCGACCAAAAUUUUUUCUUCAAUCAAGCGCAGUGCUGGUAAGCCCUUGCCAUUGCUGGAAGGAAGCCCUGUCGGGUGCAGAAUGGGCUAAAGCUCCGGAGGGGGACAUAAUGACCCUCCUAUUCUGUGUAUUUAUGAGUCCGGAAGGACAGCUCCCGCUCCUGAUCGUUACUACCCUUAGAUGCUUGCGUUGGAAAGCAGCAAGCAUCGGGCUAGUCACGGUACGGCAUUACCUCAGAUUCGAUAGCGACGUAACUAUCGUUAACACGGAGAAAACACGGCCCAUUAUUUCAAGGAGAAUAGAUUGUAAUGGAUCGGCUAACGCAACUGCCGAAGCAAUGGGGACAGCGAGAGUUGCGCUCGUGUCGCCAUCGCUUGCGCAGUCGACGCGCUGCGAUCCUGGCGAUGACAUAGCAGGGGUACCGGUCGUUAGCGCACUCGAUCUAAGCGGGUGUCAGCUGCGGAAGUGCACAGGCACGAGUCCAAUAGUGUCAGGACCGGCUGGAUUAACCGGGCCAGGCCGGACCACGCCAAAAGGACACAUCAAUCAGUGCCGAGUGGAAAUUGCAACUCUGGGCCAACUAUGGGUUAGGAGGCUACCACUCAUCAAUAUGCGAGGUUGGGGUCGGCGGUGUAACGUGCUUUCGGUACACCGCUCCUUUGAUUCCACAAGUUCGCGGACAGUUUUAUACGGCCUAGUUCGCGAUUUUAGAGGGUAUAGCUUCUCAGAUAGCGGAUCUAGUAAGGCCAAUAAUUACAGCUUAAAGGUCCGCUGGCUGGAGCGAAGUACAAGCAGUACACAUGCACGUUCACACGUCCAGGUGUACCAUCGCCUGCCUCAUAUUGGAACGGCCAGCCAACAGAGAUGCGGACACAGCGCGCACAGAGGUUUCCUCAAAAGACAGAGCAGUAAUAAUUGGAUCUUUUGGUCGGUUGGCAUCGAAAACCUAGGCUCACUGGGACGGAUAACGUGCACAAAACAAUUGUCGGCCUUUUUAAGCAAAUGCGUGCGCCCGUCGCCAUACCGGUCGUAUUUUGCUUUCUUCCCGUGCCUAUUUGCCCUCAACGCGCGCUCUAUACUUACCCAAGUCCACCACUGCCAUCAUCGACUUGAACGCCCAACGCGGUACGUAGGAGUACGAAACUGGAAUUCUAUGGUGAUUCAACUUGACUGGCCAUUAGCGCAGCAGUUAGGCAUCAGGCCCAUGCCGCUACCUGACGUUUGCGAAGCUACGUCACGCGGGUGGAGGUGCGUUCUCUCCCGGUUCACCUCGUUUCCCGCCAAUGGUCACCUAGUCGGAACGCACUCACCGGUGUUAGUGACACUUGAGCCCCCUUAUUCGCCUCAGACGGGUUGGCUCCCUGAAAGGCUGGCGGUGGGGUUCGGGUAUCCACUGUCUGGAAUUGUGCCGACUAGCACGUUACACCACCGGCGACGAGGUAAAGUAGGCGUGACUCGCGAAGAAUAA")
//
//  print(r.toProtein(StandardTable))

//
//  val path = "/home/antonkulaga/Downloads/"
//  val name = "B_brevis.txt"
//  val file =  Source.fromFile(path+name).getLines().toList
//  val dna = DNA(file.reduce(_+_))
//  val p = Protein(Codons.aminosFrom3("Val-Lys-Leu-Phe-Pro-Trp-Phe-Asn-Gln-Tyr"))
//  val ma = AminoMatcher(p)
//
//  //println(ma.allMatchersTwoSided(dna).map(_.toDNA).mkString(" "))
//
//  val ms = ma.allMatchersTwoSided(dna).map(_.toDNA)
//  println(ms.size)
//
//  val prot= Protein("HHSDKYFGLRNRM")
//  val spec = Spectrum(prot)
//  val w = spec.weigths.mkString(" ")
//  println("0 "+w)
//  //println(Brute.numberOfPeptidesForMass(1024))
//  val inp = "0 71 101 103 114 114 128 129 137 156 172 185 217 229 240 242 266 270 285 286 288 300 343 354 369 389 398 399 414 414 422 425 483 499 517 525 526 527 528 536 554 570 628 631 639 639 654 655 664 684 699 710 753 765 767 768 783 787 811 813 824 836 868 881 897 916 924 925 939 939 950 952 982 1053"



  def noisySeq() = {
    val input = "0 97 99 113 114 115 128 128 147 147 163 186 227 241 242 244 244 256 260 261 262 283 291 309 330 333 340 347 385 388 389 390 390 405 435 447 485 487 503 504 518 544 552 575 577 584 599 608 631 632 650 651 653 672 690 691 717 738 745 770 779 804 818 819 827 835 837 875 892 892 917 932 932 933 934 965 982 989 1039 1060 1062 1078 1080 1081 1095 1136 1159 1175 1175 1194 1194 1208 1209 1223 1322"
    val spec = input.split(" ").map(_.toInt)
    val n =1000
    val s = CycloSequencer(spec)
    val res = s.bestMatches(n)
    println(s.prettyPrint(res))
  }

  def leaderBoardCyclopeptideSequencing() = {
    //val input = "0 71 71 71 87 97 97 99 101 103 113 113 114 115 128 128 129 137 147 163 163 170 184 184 186 186 190 211 215 226 226 229 231 238 241 244 246 257 257 276 277 278 299 300 312 316 317 318 318 323 328 340 343 344 347 349 356 366 370 373 374 391 401 414 414 415 419 427 427 431 437 441 446 453 462 462 462 470 472 502 503 503 511 515 529 530 533 533 540 543 547 556 559 569 574 575 584 590 600 600 604 612 616 617 630 640 640 643 646 648 660 671 683 684 687 693 703 703 719 719 719 729 730 731 737 740 741 745 747 754 774 780 784 790 797 800 806 818 826 827 832 833 838 846 846 847 850 868 869 877 884 889 893 897 903 908 913 917 930 940 947 956 960 960 961 964 965 966 983 983 985 1002 1009 1010 1011 1021 1031 1031 1036 1053 1054 1058 1059 1062 1063 1074 1076 1084 1092 1103 1113 1122 1124 1130 1133 1134 1145 1146 1146 1149 1150 1155 1156 1171 1173 1174 1187 1191 1193 1200 1212 1221 1233 1240 1242 1246 1259 1260 1262 1277 1278 1283 1284 1287 1287 1288 1299 1300 1303 1309 1311 1320 1330 1341 1349 1357 1359 1370 1371 1374 1375 1379 1380 1397 1402 1402 1412 1422 1423 1424 1431 1448 1450 1450 1467 1468 1469 1472 1473 1473 1477 1486 1493 1503 1516 1520 1525 1530 1536 1540 1544 1549 1556 1564 1565 1583 1586 1587 1587 1595 1600 1601 1606 1607 1615 1627 1633 1636 1643 1649 1653 1659 1679 1686 1688 1692 1693 1696 1702 1703 1704 1714 1714 1714 1730 1730 1740 1746 1749 1750 1762 1773 1785 1787 1790 1793 1793 1803 1816 1817 1821 1829 1833 1833 1843 1849 1858 1859 1864 1877 1886 1890 1893 1900 1900 1903 1904 1918 1922 1930 1930 1931 1961 1963 1971 1971 1971 1980 1987 1992 1996 2002 2006 2006 2014 2018 2019 2019 2032 2042 2059 2060 2063 2067 2077 2084 2086 2089 2090 2093 2105 2110 2115 2115 2116 2117 2121 2133 2134 2155 2156 2157 2176 2176 2187 2189 2192 2195 2202 2204 2207 2207 2218 2222 2243 2247 2247 2249 2249 2263 2270 2270 2286 2296 2304 2305 2305 2318 2319 2320 2320 2330 2332 2334 2336 2336 2346 2362 2362 2362 2433"
    //val input = "0 71 113 129 147 200 218 260 313 331 347 389 460"
    val input = "0 71 97 101 103 103 103 113 113 113 115 115 128 128 128 128 128 129 131 147 186 186 186 200 204 212 228 228 231 231 231 234 241 241 242 244 257 275 275 275 287 299 314 314 315 325 328 332 334 343 347 362 369 370 370 372 373 388 390 400 403 403 414 417 428 435 440 443 461 465 475 476 483 498 500 500 501 503 506 511 514 515 516 516 518 543 556 566 578 589 603 604 604 611 612 614 614 618 621 628 629 631 637 644 645 647 671 679 700 702 707 715 715 717 731 732 734 742 742 742 746 750 752 758 773 775 775 808 815 818 828 830 835 843 843 845 845 849 857 865 865 878 879 886 888 889 903 928 928 936 943 946 946 946 948 959 973 975 978 980 992 994 1006 1007 1016 1016 1017 1029 1043 1049 1049 1056 1072 1074 1076 1077 1090 1093 1103 1107 1114 1119 1120 1120 1120 1122 1132 1144 1145 1171 1177 1177 1180 1190 1203 1203 1215 1216 1218 1222 1223 1235 1235 1242 1247 1248 1248 1258 1260 1273 1293 1306 1308 1318 1318 1319 1324 1331 1331 1343 1344 1348 1350 1351 1363 1363 1376 1386 1389 1389 1395 1421 1422 1434 1444 1446 1446 1446 1447 1452 1459 1463 1473 1476 1489 1490 1492 1494 1510 1517 1517 1523 1537 1549 1550 1550 1559 1560 1572 1574 1586 1588 1591 1593 1607 1618 1620 1620 1620 1623 1630 1638 1638 1663 1677 1678 1680 1687 1688 1701 1701 1709 1717 1721 1721 1723 1723 1731 1736 1738 1748 1751 1758 1791 1791 1793 1808 1814 1816 1820 1824 1824 1824 1832 1834 1835 1849 1851 1851 1859 1864 1866 1887 1895 1919 1921 1922 1929 1935 1937 1938 1945 1948 1952 1952 1954 1955 1962 1962 1963 1977 1988 2000 2010 2023 2048 2050 2050 2051 2052 2055 2060 2063 2065 2066 2066 2068 2083 2090 2091 2101 2105 2123 2126 2131 2138 2149 2152 2163 2163 2166 2176 2178 2193 2194 2196 2196 2197 2204 2219 2223 2232 2234 2238 2241 2251 2252 2252 2267 2279 2291 2291 2291 2309 2322 2324 2325 2325 2332 2335 2335 2335 2338 2338 2354 2362 2366 2380 2380 2380 2394 2419 2435 2437 2438 2438 2438 2438 2438 2451 2451 2453 2453 2453 2463 2463 2463 2465 2469 2495 2566"
    val spec = input.split(" ").map(_.toInt)
    //val n = 325
    //val n = 10
    val n = 337
    val s = CycloSequencer(spec)
    val res = s.bestMatches(n)
    println(s.prettyPrint(res))

  }

  def loadCicloSequencer() = {

    //copypasted here, but should be from file
    val inp = "0 101 128 131 137 137 147 147 163 232 248 265 268 275 284 300 310 369 379 385 396 412 438 447 447 497 516 516 543 548 575 575 594 644 644 653 679 695 706 712 722 781 791 807 816 823 826 843 859 928 944 944 954 954 960 963 990 1091"
    val input = inp.split(" ").map(v => v.toInt).toList

    val s = SimpleCycloSequencer(input)
    println(s.stringValue)
  }

  def loadLeaderBoard() = {


    val sc = Source.fromFile("/home/antonkulaga/Downloads/dataset_4913_3 (2).txt").getLines.toList
    val protoString =sc.head.split(" ").mkString(" ")
    val protos = protoString.split(" ").map(a=> Protein(a.map(AminoAcid.fromChar)))
    val input = sc.tail.head
    val n = sc.tail.tail.head.toInt
    val protomaps = protos.map(p=>ProteinWeights.massesOf(p)->p).toMap
    val protomasses = protos.map(p=>ProteinWeights.massesOf(p))
    val cs = CycloSequencer.fromMasses(input)
    val lead = cs.linearLeaderboard(protomasses)
    val lnew = cs.trim(lead,n)
    val leaders = lnew.map(m=>protomaps(m.toIndexedSeq))
    val res =leaders.mkString(" ")
    println(res)

  }
  //leaderBoardCyclopeptideSequencing()
  this.noisySeq()

}

